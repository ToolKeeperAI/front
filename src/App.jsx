import React, { useState } from 'react';
import Button from './components/Button';
import styles from './App.module.css';

export default function App() {
  const [step, setStep] = useState('enterId');
  const [badge, setBadge] = useState('');
  const [inputVal, setInputVal] = useState('');
  const [tools, setTools] = useState([]);
  const [action, setAction] = useState(null); // "take" –∏–ª–∏ "return"
  const [fileType, setFileType] = useState('image'); // "image" –∏–ª–∏ "zip"
  const [selectedFile, setSelectedFile] = useState(null);

  function reset() {
    setStep('enterId');
    setBadge('');
    setInputVal('');
    setTools([]);
    setAction(null);
    setFileType('image');
    setSelectedFile(null);
  }

  function goBack() {
    if (step === 'upload') setStep('enterId');
    else if (step === 'tools') setStep('upload');
    else if (step === 'action') setStep('tools');
    else if (step === 'report') setStep('action');
  }

  async function fetchTools() {
    try {
      if (!selectedFile) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π");
        return false; // üö® –Ω–µ—É—Å–ø–µ—Ö
      }

      const formData = new FormData();
      formData.append("file", selectedFile);

      let data;
      if (fileType === "image") {
        const response = await fetch("http://127.0.0.1:8000/api/v1/Tools/Test", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();
        data = result;
      } else {
        const response = await fetch("http://127.0.0.1:8000/api/v1/Tools/TestZip", {
          method: "POST",
          body: formData,
        });

        data = await response.json();
      }

      setTools(data);
      return true; // ‚úÖ —É—Å–ø–µ—Ö
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", err);
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤");
      return false;
    }
  }
  async function confirmReport() {
    try {
      let payload = [];

      if (fileType === "image") {
        payload = tools.map(t => ({
          toolId: t.id,
          action: action === "take" ? "take" : "return",
        }));
      } else {
        payload = tools.flatMap(fileBlock =>
          fileBlock.tools.map(t => ({
            toolId: t.id,
            action: action === "take" ? "take" : "return",
          }))
        );
      }

      const url =
        action === "take"
          ? `http://127.0.0.1:8000/api/v1/Tools/TakeTools/${badge}`
          : `http://127.0.0.1:8000/api/v1/Tools/ReturnTools/${badge}`;

      await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      reset();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", err);
    }
  }


  return (
    <div className={styles.container}>
      <div className="background"></div>
      {/* –®–∞–≥ 1: –í–≤–æ–¥ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ */}
      {step === 'enterId' && (
        <div className={styles.centered}>
          <h2>–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</h2>
          <input
            type="text"
            className={styles.inputField}
            value={inputVal}
            onChange={e => setInputVal(e.target.value)}
            placeholder="–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä"
          />
          <div style={{ marginTop: 20 }}>
            <Button onClick={() => {
              if (inputVal.trim()) {
                setBadge(inputVal.trim());
                setStep('upload');
              }
            }}>
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </Button>
          </div>
        </div>
      )}

      {/* –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
      {step === 'upload' && (
        <div className={styles.centered}>
          <h2>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏</h2>

          <div style={{ marginBottom: 10 }}>
            <label>
              <input
                type="radio"
                checked={fileType === "image"}
                onChange={() => setFileType("image")}
              />
              –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            </label>
            <label style={{ marginLeft: 20 }}>
              <input
                type="radio"
                checked={fileType === "zip"}
                onChange={() => setFileType("zip")}
              />
              ZIP –∞—Ä—Ö–∏–≤
            </label>
          </div>

          <div className={styles.frame}>
            <label htmlFor="fileUpload">
              {selectedFile ? selectedFile.name : "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"}
            </label>
            <input
              id="fileUpload"
              type="file"
              accept={fileType === "image" ? "image/*" : ".zip"}
              onChange={e => setSelectedFile(e.target.files[0])}
            />
          </div>

          <div style={{ marginTop: 20 }}>
            <Button
              onClick={async () => {
                const ok = await fetchTools();
                if (ok) {
                  setStep('tools');
                }
              }}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            </Button>

          </div>
        </div>
      )}

      {/* –®–∞–≥ 3: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      {step === 'tools' && (
        <div>
          <h2>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h2>
          <div className={styles.scrollBox}>
            {tools.map((file, idx) => (
              <div key={idx} style={{ marginBottom: 20 }}>
                <h4>{file.filename}</h4>
                <ul>
                  {file.tools.map((t, tidx) => (
                    <li key={tidx}>
                      {t.name} {t.confidence ? `(${t.confidence * 100}%)` : ""}
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
          <div style={{ textAlign: 'right', marginTop: 20 }}>
            <Button onClick={() => setStep('action')}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫</Button>
          </div>
        </div>
      )}




      {/* –®–∞–≥ 4: –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è */}
      {step === 'action' && (
        <div className={styles.centered}>
          <h2>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</h2>
          <Button onClick={() => {
            setAction('take');
            setStep('report');
          }}>–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</Button>
          <Button onClick={() => {
            setAction('return');
            setStep('report');
          }}>–°–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</Button>
        </div>
      )}

      {/* –®–∞–≥ 5: –†–∞–ø–æ—Ä—Ç */}
      {step === 'report' && (
        <div>
          <h2>–û—Ç—á—ë—Ç</h2>
          <p>
            –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º <b>{badge}</b>
            {action === 'take' ? ' –ø–æ–ª—É—á–∏–ª' : ' —Å–¥–∞–ª'} –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
          </p>

          <div className={styles.scrollBox}>
            {tools.map((file, idx) => (
              <div key={idx} style={{ marginBottom: 20 }}>
                <h4>{file.filename}</h4>
                <ul>
                  {file.tools.map((t, tidx) => (
                    <li key={tidx}>
                      {t.name} {t.confidence ? `(${t.confidence * 100}%)` : ""}
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>

          <div style={{ textAlign: 'right', marginTop: 20 }}>
            <Button onClick={confirmReport}>–°–æ–≥–ª–∞—Å–µ–Ω</Button>
          </div>
        </div>
      )}



      {/* –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ */}
      {
        step !== 'enterId' && (
          <div style={{ position: 'fixed', bottom: 20, left: 20 }}>
            <Button onClick={goBack}>–ù–∞–∑–∞–¥</Button>
          </div>
        )
      }
    </div >
    
  );
}
